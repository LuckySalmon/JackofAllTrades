from typing import TypeAlias, overload

_Vec3f: TypeAlias = LVecBase3f | LMatrix3f.Row | LMatrix3f.CRow
_Vec4f: TypeAlias = LVecBase4f | UnalignedLVecBase4f | LMatrix4f.Row | LMatrix4f.CRow
_Mat4f: TypeAlias = LMatrix4f | UnalignedLMatrix4f

class LVecBase3f:
    def __getitem__(self, i: int) -> float: ...
    def __add__(self, other: _Vec3f) -> LVecBase3f: ...
    def __sub__(self, other: _Vec3f) -> LVecBase3f: ...
    def __mul__(self, scalar: float) -> LVecBase3f: ...
    def __iadd__(self, other: _Vec3f) -> LVecBase3f: ...
    def __imul__(self, scalar: float) -> LVecBase3f: ...
    def dot(self, other: _Vec3f) -> float: ...
    def length(self) -> float: ...
    def normalized(self) -> LVecBase3f: ...
    def cross(self, other: _Vec3f) -> LVecBase3f: ...

class LVector3f(LVecBase3f):
    @overload
    def __init__(self, copy: _Vec3f) -> None: ...
    @overload
    def __init__(self, x: float, y: float, z: float) ->  None: ...

class LPoint3f(LVecBase3f):
    def __init__(self, copy: _Vec3f) -> None: ...

class LVecBase4f:
    @overload
    def __init__(self, fill_value: float) -> None: ...
    @overload
    def __init__(self, copy: _Vec3f, w: float) -> None: ...
    @overload
    def __init__(self, x: float, y: float, z: float, w: float) -> None: ...
    def get_xyz(self) -> LVecBase3f: ...

class UnalignedLVecBase4f:
    ...

class LMatrix3f:
    class Row:
        ...
    class CRow:
        ...
    @overload
    def __init__(self,
                 __param0: _Vec3f,
                 __param1: _Vec3f,
                 __param2: _Vec3f) -> None: ...
    @overload
    def __init__(self,
                 __param0: float, __param1: float, __param2: float,
                 __param3: float, __param4: float, __param5: float,
                 __param6: float, __param7: float, __param8: float) -> None: ...
    def __mul__(self, other: LMatrix3f) -> LMatrix3f: ...
    def xform(self, v: _Vec3f) -> LVecBase3f: ...
    @staticmethod
    def ident_mat() -> LMatrix3f: ...

class LMatrix4f:
    class Row:
        ...
    class CRow:
        ...
    def __init__(self, upper3: LMatrix3f, trans: _Vec3f) -> None: ...
    def __mul__(self, other: _Mat4f) -> LMatrix4f: ...
    def get_upper_3(self) -> LMatrix3f: ...
    def xform(self, v: _Vec4f) -> LVecBase4f: ...
    def xform_point(self, v: _Vec3f) -> LVecBase3f: ...

class UnalignedLMatrix4f:
    ...

class LQuaternionf(LVecBase4f):
    def __init__(self, r: float, i: float, j: float, k: float) -> None: ...
    def normalize(self) -> bool: ...

VBase3 = LVecBase3f
Vec3 = LVector3f
Point3 = LPoint3f
VBase4 = LVecBase4f
LMatrix3 = LMatrix3f
Mat3 = LMatrix3f
LMatrix4 = LMatrix4f
Mat4 = LMatrix4f
LQuaternion = LQuaternionf
Quat = LQuaternionf
