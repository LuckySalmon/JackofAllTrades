from typing import TypeVar, Generic

from .TransformState import TransformState
from .PandaNode import PandaNode
from .Thread import Thread
from .DrawMask import DrawMask
from .LVecBase3f import LVecBase3f
from .LVector3f import LVector3f
from .LPoint3f import LPoint3f
from .LMatrix4f import LMatrix4f

T = TypeVar('T', bound=PandaNode)
U = TypeVar('U', bound=PandaNode)

class NodePath(Generic[T]):
    def node(self) -> T: ...

    def attachNewNode(self, node: U, sort: int = 0, current_thread: Thread = ...) -> NodePath[U]: ...

    def setPos(self, x: float, y: float, z: float) -> None: ...

    def lookAt(self, x: float, y: float, z: float) -> None: ...

    def hide(self) -> None: ...

    def show(self) -> None: ...

    def isHidden(self, camera_mask: DrawMask = ...) -> bool: ...

    def reparentTo(self, other: NodePath, sort: int = 0, current_thread: Thread = ...) -> None: ...

    def getPos(self) -> LPoint3f: ...

    def getMat(self, other: NodePath) -> LMatrix4f: ...

    def getNetTransform(self) -> TransformState: ...

    def getRelativePoint(self, other: NodePath, point: LVecBase3f) -> LPoint3f: ...

    def getRelativeVector(self, other: NodePath, vec: LVecBase3f) -> LVector3f: ...
